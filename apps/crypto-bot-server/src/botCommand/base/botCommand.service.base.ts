/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BotCommand as PrismaBotCommand } from "@prisma/client";

export class BotCommandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BotCommandCountArgs, "select">
  ): Promise<number> {
    return this.prisma.botCommand.count(args);
  }

  async botCommands(
    args: Prisma.BotCommandFindManyArgs
  ): Promise<PrismaBotCommand[]> {
    return this.prisma.botCommand.findMany(args);
  }
  async botCommand(
    args: Prisma.BotCommandFindUniqueArgs
  ): Promise<PrismaBotCommand | null> {
    return this.prisma.botCommand.findUnique(args);
  }
  async createBotCommand(
    args: Prisma.BotCommandCreateArgs
  ): Promise<PrismaBotCommand> {
    return this.prisma.botCommand.create(args);
  }
  async updateBotCommand(
    args: Prisma.BotCommandUpdateArgs
  ): Promise<PrismaBotCommand> {
    return this.prisma.botCommand.update(args);
  }
  async deleteBotCommand(
    args: Prisma.BotCommandDeleteArgs
  ): Promise<PrismaBotCommand> {
    return this.prisma.botCommand.delete(args);
  }
}
