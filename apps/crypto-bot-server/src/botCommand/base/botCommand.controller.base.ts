/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BotCommandService } from "../botCommand.service";
import { BotCommandCreateInput } from "./BotCommandCreateInput";
import { BotCommand } from "./BotCommand";
import { BotCommandFindManyArgs } from "./BotCommandFindManyArgs";
import { BotCommandWhereUniqueInput } from "./BotCommandWhereUniqueInput";
import { BotCommandUpdateInput } from "./BotCommandUpdateInput";

export class BotCommandControllerBase {
  constructor(protected readonly service: BotCommandService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BotCommand })
  async createBotCommand(
    @common.Body() data: BotCommandCreateInput
  ): Promise<BotCommand> {
    return await this.service.createBotCommand({
      data: data,
      select: {
        commandText: true,
        createdAt: true,
        description: true,
        id: true,
        parameters: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BotCommand] })
  @ApiNestedQuery(BotCommandFindManyArgs)
  async botCommands(@common.Req() request: Request): Promise<BotCommand[]> {
    const args = plainToClass(BotCommandFindManyArgs, request.query);
    return this.service.botCommands({
      ...args,
      select: {
        commandText: true,
        createdAt: true,
        description: true,
        id: true,
        parameters: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BotCommand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async botCommand(
    @common.Param() params: BotCommandWhereUniqueInput
  ): Promise<BotCommand | null> {
    const result = await this.service.botCommand({
      where: params,
      select: {
        commandText: true,
        createdAt: true,
        description: true,
        id: true,
        parameters: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BotCommand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBotCommand(
    @common.Param() params: BotCommandWhereUniqueInput,
    @common.Body() data: BotCommandUpdateInput
  ): Promise<BotCommand | null> {
    try {
      return await this.service.updateBotCommand({
        where: params,
        data: data,
        select: {
          commandText: true,
          createdAt: true,
          description: true,
          id: true,
          parameters: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BotCommand })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBotCommand(
    @common.Param() params: BotCommandWhereUniqueInput
  ): Promise<BotCommand | null> {
    try {
      return await this.service.deleteBotCommand({
        where: params,
        select: {
          commandText: true,
          createdAt: true,
          description: true,
          id: true,
          parameters: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
