/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CryptoCurrency } from "./CryptoCurrency";
import { CryptoCurrencyCountArgs } from "./CryptoCurrencyCountArgs";
import { CryptoCurrencyFindManyArgs } from "./CryptoCurrencyFindManyArgs";
import { CryptoCurrencyFindUniqueArgs } from "./CryptoCurrencyFindUniqueArgs";
import { CreateCryptoCurrencyArgs } from "./CreateCryptoCurrencyArgs";
import { UpdateCryptoCurrencyArgs } from "./UpdateCryptoCurrencyArgs";
import { DeleteCryptoCurrencyArgs } from "./DeleteCryptoCurrencyArgs";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { CryptoCurrencyService } from "../cryptoCurrency.service";
@graphql.Resolver(() => CryptoCurrency)
export class CryptoCurrencyResolverBase {
  constructor(protected readonly service: CryptoCurrencyService) {}

  async _cryptoCurrenciesMeta(
    @graphql.Args() args: CryptoCurrencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CryptoCurrency])
  async cryptoCurrencies(
    @graphql.Args() args: CryptoCurrencyFindManyArgs
  ): Promise<CryptoCurrency[]> {
    return this.service.cryptoCurrencies(args);
  }

  @graphql.Query(() => CryptoCurrency, { nullable: true })
  async cryptoCurrency(
    @graphql.Args() args: CryptoCurrencyFindUniqueArgs
  ): Promise<CryptoCurrency | null> {
    const result = await this.service.cryptoCurrency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CryptoCurrency)
  async createCryptoCurrency(
    @graphql.Args() args: CreateCryptoCurrencyArgs
  ): Promise<CryptoCurrency> {
    return await this.service.createCryptoCurrency({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CryptoCurrency)
  async updateCryptoCurrency(
    @graphql.Args() args: UpdateCryptoCurrencyArgs
  ): Promise<CryptoCurrency | null> {
    try {
      return await this.service.updateCryptoCurrency({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CryptoCurrency)
  async deleteCryptoCurrency(
    @graphql.Args() args: DeleteCryptoCurrencyArgs
  ): Promise<CryptoCurrency | null> {
    try {
      return await this.service.deleteCryptoCurrency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Account], { name: "accounts" })
  async findAccounts(
    @graphql.Parent() parent: CryptoCurrency,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: CryptoCurrency,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
