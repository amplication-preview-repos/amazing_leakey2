/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CryptoCurrency as PrismaCryptoCurrency,
  Account as PrismaAccount,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class CryptoCurrencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptoCurrencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptoCurrency.count(args);
  }

  async cryptoCurrencies(
    args: Prisma.CryptoCurrencyFindManyArgs
  ): Promise<PrismaCryptoCurrency[]> {
    return this.prisma.cryptoCurrency.findMany(args);
  }
  async cryptoCurrency(
    args: Prisma.CryptoCurrencyFindUniqueArgs
  ): Promise<PrismaCryptoCurrency | null> {
    return this.prisma.cryptoCurrency.findUnique(args);
  }
  async createCryptoCurrency(
    args: Prisma.CryptoCurrencyCreateArgs
  ): Promise<PrismaCryptoCurrency> {
    return this.prisma.cryptoCurrency.create(args);
  }
  async updateCryptoCurrency(
    args: Prisma.CryptoCurrencyUpdateArgs
  ): Promise<PrismaCryptoCurrency> {
    return this.prisma.cryptoCurrency.update(args);
  }
  async deleteCryptoCurrency(
    args: Prisma.CryptoCurrencyDeleteArgs
  ): Promise<PrismaCryptoCurrency> {
    return this.prisma.cryptoCurrency.delete(args);
  }

  async findAccounts(
    parentId: string,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.cryptoCurrency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.cryptoCurrency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
